// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String   @id @default(uuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  username  String  @unique
  email     String  @unique
  bio       String?
  avatar    String?
  expertise String[] @default([])
  password  String
  isEmailVerified Boolean @default(false) @map("is_email_verified")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles     String[]  
  OTP otp[]
  refreshToken refreshToken[]
  blogs blogs[]
  feedback feedback[]
  predictionHistory predictionHistory[]

  @@index([id])
  @@map("users")
}

model otp {
  id          String   @id @default(uuid())
  userId      String
  otpHash     String   // Hashed OTP
  purpose     String   @default("email_verification")// Purpose of the OTP (e.g., "email_verification", "password_reset")
  expiresAt   DateTime @map("expires_at") // Expiration time for the OTP
  attempts    Int      @default(0) 
  requestedAt DateTime @default(now()) @map("requested_at")
  isActive   Boolean  @default(true) @map("is_active") // Flag to indicate if OTP is still active
  user        user     @relation(fields: [userId], references: [id])
  @@index([userId]) // Index for quick lookup by user
  @@map("otp")
}

model refreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String   @map("user_id")
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}



model blogs {
  id          String   @id @default(uuid())
  title       String
  content     String
  authorId    String   @map("author_id")
  excerpt    String?
  tags        String[] @default([]) // Array of tags for the blog post
  readTime   Int      @default(0) // Estimated read time in minutes
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  author      user     @relation(fields: [authorId], references: [id])
  
  @@index([authorId])
  @@map("blogs")
}

model feedback {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        user     @relation(fields: [userId], references: [id])
  @@index([userId])
  @@map("feedback")
}

// ...existing code...

model predictionHistory {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  inputSummary      Json     @map("input_summary") // Store the input parameters as JSON
  predictions       Json     // Store the array of model predictions as JSON
  consensus         Json     // Store consensus data as JSON
  bestModelName     String   @map("best_model_name")
  bestPrediction    Int      @map("best_prediction")
  bestPredictionLabel String @map("best_prediction_label")
  bestFloodProbability Float @map("best_flood_probability")
  bestConfidence    Float    @map("best_confidence")
  bestModelAccuracy Float    @map("best_model_accuracy")
  bestModelAuc      Float    @map("best_model_auc")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@map("prediction_history")
}